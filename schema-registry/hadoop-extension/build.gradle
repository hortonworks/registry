/*
 * Copyright 2018-2021 Cloudera, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

configurations {
    shim {
        description = "Classes on the main classpath which will load the Hadoop classes"
    }
    plugin {
        description = "Classes which are on the secondary classpath, to be loaded with the classloader"
    }
}

sourceSets {
    test {
        java {
            include '**/*.*'
        }
    }
}

dependencies {

    compile(project(':registry-common')) { transitive = false }

    compile libraries.hadoop.aws
    compile libraries.hadoop.azure
    compile libraries.hadoop.azure_datalake
    compile libraries.hadoop.cloud
    compile libraries.hadoop.client
    compile libraries.hadoop.common

    testCompile libraries.junit
    testCompile libraries.mockito
    testCompile libraries.mockito_inline

    testRuntimeOnly libraries.logging.slf4j_api
    testRuntimeOnly libraries.logging.slf4j_jcl
    testRuntimeOnly libraries.logging.slf4j_simple

}

task copyDependencies(type: Sync) {
    into "$buildDir/libs/hadoop-schema-registry-plugin-impl"
    from configurations.runtime
}
assemble.dependsOn(copyDependencies)

// This project generates 2 JAR files: the shim goes to the main
// classpath and the plugin goes under hadoop-plugin-impl

task buildShim(type: Jar) {
    archiveClassifier = "shim"
    from(sourceSets.main.output) {
        exclude "com/hortonworks/registries/common/hadoop/**"
    }
}
task buildPlugin(type: Jar) {
    archiveClassifier = "plugin"
    from(sourceSets.main.output) {
        exclude "com/hortonworks/registries/common/util/**"
    }

}

assemble.dependsOn(buildShim)
assemble.dependsOn(buildPlugin)

artifacts {
    shim buildShim
    plugin buildPlugin
}