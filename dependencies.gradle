/*
 * Copyright 2018-2021 Cloudera, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

ext.java_version = JavaVersion.VERSION_1_8

ext.libraries = [

   atlas: [
      classloader: dependencies.create("org.apache.atlas:atlas-plugin-classloader:$versions_atlas") {
          exclude group: 'org.slf4j', module: 'slf4j-log4j12'
      },
      client: dependencies.create("org.apache.atlas:atlas-client-v2:$versions_atlas") {
          exclude group: 'com.google.code.findbugs', module: 'jsr305'
          exclude group: 'com.nimbusds', module: 'nimbus-jose-jwt'
          exclude group: 'org.codehaus.jackson', module: 'jackson-core-asl'
          exclude group: 'org.apache.avro', module: 'avro'
          exclude group: 'jdk.tools', module: 'jdk.tools'
          exclude group: 'org.apache.curator'
          exclude group: 'org.slf4j'
      },
      intg: dependencies.create("org.apache.atlas:atlas-intg:$versions_atlas") {
          transitive = false
      }
   ],
   avro              : "org.apache.avro:avro:$versions_avro",

   commons: [
      beanutils      : "commons-beanutils:commons-beanutils:$versions_commons_beanutils",
      cli            : "commons-cli:commons-cli:$versions_commons_cli",
      codec          : "commons-codec:commons-codec:$versions_commons_codec",
      collections    : "org.apache.commons:commons-collections4:$versions_commons_collections",
      io             :"commons-io:commons-io:$versions_commons_io",
      lang3          : "org.apache.commons:commons-lang3:$versions_commons_lang3",
      text           : "org.apache.commons:commons-text:$versions_commons_text",
   ],
   curator: [
      client         : "org.apache.curator:curator-client:$versions_curator",
      framework      : "org.apache.curator:curator-framework:$versions_curator",
      recipes        : "org.apache.curator:curator-recipes:$versions_curator",
      test           : "org.apache.curator:curator-test:$versions_curator",
   ],
   directory_api     : "org.apache.directory.api:api-util:$versions_directory_api",
   directory_server: dependencies.create("org.apache.directory.server:apacheds-kerberos-codec:$versions_directory_server") {
       exclude group: 'org.apache.directory.api', module: 'api-asn1-ber'
       exclude group: 'org.apache.directory.api', module: 'api-i18n'
       exclude group: 'org.apache.directory.api', module: 'api-ldap-model'
       exclude group: 'org.apache.directory.api', module: 'api-util'
       exclude group: 'net.sf.ehcache', module: 'ehcache-core'
       exclude group: 'org.slf4j', module: 'slf4j-api'
   },

   dropwizard: [
      bom            : "io.dropwizard:dropwizard-bom:$versions_dropwizard",
      core           : "io.dropwizard:dropwizard-core:$versions_dropwizard",
      assets         : "io.dropwizard:dropwizard-assets:$versions_dropwizard",
      auth           : "io.dropwizard:dropwizard-auth:$versions_dropwizard",
      jersey         : "io.dropwizard:dropwizard-jersey:$versions_dropwizard",
      util           : "io.dropwizard:dropwizard-util:$versions_dropwizard",
      metrics        : "io.dropwizard.metrics:metrics-annotation:$versions_dropwizard_metrics",
      testing: dependencies.create("io.dropwizard:dropwizard-testing:$versions_dropwizard_testing") {
          exclude group: 'junit'
      },
      swagger        : "com.smoketurner:dropwizard-swagger:$versions_dropwizard_swagger",
      guicey         : "ru.vyarus:dropwizard-guicey:$versions_dropwizard_guicey"
   ],
   swagger           : "io.swagger:swagger-annotations",

   el_api            : "javax.el:javax.el-api:$versions_el_api",

   flyway            : "org.flywaydb:flyway-gradle-plugin:$versions_flyway",
   freemarker        : "org.freemarker:freemarker:$versions_freemarker",

   jackson: [
      bom            : "com.fasterxml.jackson:jackson-bom:$versions_jackson2",
      annotations    : "com.fasterxml.jackson.core:jackson-annotations:$versions_jackson2",
      core           : "com.fasterxml.jackson.core:jackson-core:$versions_jackson2",
      databind       : "com.fasterxml.jackson.core:jackson-databind:$versions_jackson2",
      dataformat     : "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$versions_jackson2",
      dataformat_csv : "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:$versions_jackson2",
      dataformat_yaml: "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$versions_jackson2",
      datatype_json_org : "com.fasterxml.jackson.datatype:jackson-datatype-json-org:$versions_jackson2",
      datatype_guava : "com.fasterxml.jackson.datatype:jackson-datatype-guava:$versions_jackson2",
      datatype_jsk8  : "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$versions_jackson2",
      datatype_joda  : "com.fasterxml.jackson.datatype:jackson-datatype-joda:$versions_jackson2",
      datatype_jsr310: "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$versions_jackson2",
      parameter_names: "com.fasterxml.jackson.module:jackson-module-parameter-names:$versions_jackson2",
      jaxrs          : "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$versions_jackson2",
      scala_module   : "com.fasterxml.jackson.module:jackson-module-scala_$kafka_scala_version:$versions_jackson2",
   ],
   jaxb_api          : "javax.xml.bind:jaxb-api:$versions_jaxb_api",
   json_kjetland     : dependencies.create("com.kjetland:mbknor-jackson-jsonschema_$kafka_scala_version:$versions_json_kjetland") {
       exclude group: 'org.jetbrains.kotlin', module: 'kotlin-scripting-compiler-embeddable'
   },

   jersey: [
      bom            : "org.glassfish.jersey:jersey-bom:$versions_jersey",
      client: dependencies.create("org.glassfish.jersey.core:jersey-client:$versions_jersey") {
          exclude group: 'javax.ws.rs', module: 'javax.ws.rs-api'
      },
      hk2            : "org.glassfish.jersey.inject:jersey-hk2:$versions_jersey",
      server         : "org.glassfish.jersey.core:jersey-server:$versions_jersey",
      media_json     : "org.glassfish.jersey.media:jersey-media-json-jackson:$versions_jersey",
      media_multipart: "org.glassfish.jersey.media:jersey-media-multipart:$versions_jersey"
   ],

   jetty_bom         : "org.eclipse.jetty:jetty-bom:$versions_jetty",
   jetty             : "org.eclipse.jetty:jetty-server:$versions_jetty",
   joda_time         : "joda-time:joda-time:$versions_joda_time",
   jopt              : "net.sf.jopt-simple:jopt-simple:$versions_jopt",
   jose4j            : "org.bitbucket.b_c:jose4j:$versions_jose4j",
   json_schema_validator : "com.github.erosb:everit-json-schema:$versions_json_schema_validator",
   junit             : "org.junit.jupiter:junit-jupiter:$versions_junit",
   mockito           : "org.mockito:mockito-core:$versions_mockito",
   mockito_junit5    : "org.mockito:mockito-junit-jupiter:$versions_mockito",
   mockito_inline    : "org.mockito:mockito-inline:$versions_mockito",
   mockserver        : "org.mock-server:mockserver-netty:$versions_mockserver",
   cucumber: [
       core: "io.cucumber:cucumber-java:$versions_cucumber",
       junit: "io.cucumber:cucumber-junit:$versions_cucumber",
       junit_platform: "io.cucumber:cucumber-junit-platform-engine:$versions_cucumber",
       picocontainer: "io.cucumber:cucumber-picocontainer:$versions_cucumber"
   ],

   logging: [
      logback        : "ch.qos.logback:logback-classic",
      log4j          : "log4j:log4j",
      slf4j_log4j    : "org.slf4j:log4j-over-slf4j",
      slf4j_api      : "org.slf4j:slf4j-api",
      slf4j_simple   : "org.slf4j:slf4j-simple"
   ],

   gson              : "com.google.code.gson:gson:$versions_gson",
   libphonenumber    : "com.googlecode.libphonenumber:libphonenumber:$versions_libphonenumber",
   guava             : "com.google.guava:guava:$versions_guava",
   guice             : "com.google.inject:guice:$versions_guice",

   h2                : "com.h2database:h2:$versions_h2",
   hikari            : "com.zaxxer:HikariCP:$versions_hikari",
   hibernate_validator: "org.hibernate.validator:hibernate-validator",
   httpclient        : [
           "client" : "org.apache.httpcomponents:httpclient:$versions_httpclient",
           "mime"   : "org.apache.httpcomponents:httpmime:$versions_httpclient",
   ],
   jna               : "net.java.dev.jna:jna:$versions_jna_platform",
   jna_platform      : "net.java.dev.jna:jna-platform:$versions_jna_platform",
   nimbus            : dependencies.create("com.nimbusds:nimbus-jose-jwt:$versions_nimbus") {
       exclude group: 'net.minidev', module: 'json-smart'
   },
   json_smart        : "net.minidev:json-smart:$versions_json_smart",

   kafka: [
     confluent_avro_serializer : "io.confluent:kafka-avro-serializer:$versions_confluent",
     core : dependencies.create("org.apache.kafka:kafka_$kafka_scala_version:$versions_kafka") {
         exclude group: 'org.apache.zookeeper', module: 'zookeeper'
         exclude group: 'log4j', module: 'log4j'
     },
     clients         : "org.apache.kafka:kafka-clients:$versions_kafka",
     streams         : "org.apache.kafka:kafka-streams:$versions_kafka",
     streams_test_utils: "org.apache.kafka:kafka-streams-test-utils:$versions_kafka",
     test: [
         core         : "org.apache.kafka:kafka_$kafka_scala_version:$versions_kafka:test",
         clients      : "org.apache.kafka:kafka-clients:$versions_kafka:test",
         streams      : "org.apache.kafka:kafka-streams:$versions_kafka:test",
         streams_test_utils: "org.apache.kafka:kafka-streams-test-utils:$versions_kafka:test"
     ]
   ],

   hadoop: [
     aws              : "org.apache.hadoop:hadoop-aws:$versions_hadoop",
     azure            : "org.apache.hadoop:hadoop-azure:$versions_hadoop",
     azure_datalake   : "org.apache.hadoop:hadoop-azure-datalake:$versions_hadoop",
     client           : "org.apache.hadoop:hadoop-client:$versions_hadoop",
     cloud            : "org.apache.hadoop:hadoop-cloud-storage:$versions_hadoop",
     common           : "org.apache.hadoop:hadoop-common:$versions_hadoop",
     minikdc          : "org.apache.hadoop:hadoop-minikdc:$versions_hadoop"
   ],

   plexus: [
     annotations     : "org.codehaus.plexus:plexus-component-annotations:$versions_plexus_annotations",
     utils           : "org.codehaus.plexus:plexus-utils:$versions_plexus_utils",
     dispatcher      : "org.sonatype.plexus:plexus-sec-dispatcher:$versions_plexus_dispatcher"
   ],

   pmml: [
     evaluator       : "org.jpmml:pmml-evaluator:$versions_pmml",
     schema          : "org.jpmml:pmml-schema:$versions_pmml"
   ],

   postgresql        : "org.postgresql:postgresql:$versions_postgresql",

   ranger: [
     common          : "org.apache.ranger:ranger-plugins-common:$versions_ranger",
     audit           : "org.apache.ranger:ranger-plugins-audit:$versions_ranger",
     classloader     : "org.apache.ranger:ranger-plugin-classloader:$versions_ranger"
   ],

   servlet_api        : "javax.servlet:servlet-api:$versions_servlet_api",
   snakeyaml          : "org.yaml:snakeyaml",

   validation_api     : "javax.validation:validation-api:$versions_validation_api",
   validation_api2    : "jakarta.validation:jakarta.validation-api:$versions_validation_api2"

]
