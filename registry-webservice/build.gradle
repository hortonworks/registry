/*
 * Copyright 2018-2021 Cloudera, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

plugins {
    id "com.github.node-gradle.node" version "7.0.1"
}

def nodeJsSrc = 'src/main/nodeJs'

sourceSets {
    main {
        resources {
            srcDir nodeJsSrc
        }
    }
}

def parseNpmSettings(String settingsStr) {
  def result = new HashMap()
  if (settingsStr != null && !settingsStr.trim().equals("")) {
     def counter = 0
     def tokens = settingsStr.split("\\,\\s*")
     tokens.each { val -> 
        def keyVal = val.split("\\=\\>")
        if (keyVal.length == 2) {
            counter = counter + 1
            if (counter == 1) {
                println("NPM Environment Variables:")
            }
            println("\t" + keyVal[0] + " = " + keyVal[1])
            result.put(keyVal[0], keyVal[1])
        }
     }
  }
  return result
}

/*
  Below code might look complicated so here's a brief overview of what it does.
  1. Install nodejs and npm under .gradle (they are downloaded from a repo)
  2. Copy npm files from src/main/nodejs to build/resources
  3. Copy files from build/resources to build/reactWebsite. This is needed because npm modifies the 
     input files. If we were to run npm inside build/resources, it would cause Gradle to copy the npm 
     files again during the next run, causing npm to run again, even if no source files have been modified.
  4. Run npm, the generated files will be located under public/assets
  5. Copy public/assets to ./assets
  6. Build a JAR file which includes any Java classes and ./assets
  
  Note that the npm tasks are disabled by default. They are only enabled if "processResources" runs.
  In turn, "processResources" will only run if the javascript files were modified. This task will 
  set the property "runNpmBuild" to true, which will enable the npm tasks.
*/

def npmSettingsMap = parseNpmSettings(npm_settings)

def reactWebsite = file("$buildDir/reactWebsite")

// nodejs will be downloaded into the .gradle directory
node {
    download = true
    version = "13.11.0"
    npmVersion = "6.14.18"
    distBaseUrl = npmSettingsMap['nodeDownloadRoot'] ?: 'https://nodejs.org/dist'
    allowInsecureProtocol = true
}
npmInstall.args = ['--loglevel', 'info']

project.ext {
    runNpmBuild = false
}

processResources.doLast {
    println("Triggering website build")
    project.ext.runNpmBuild = true
}

tasks.register("copyReactWorkspace", Copy) {
    from "$sourceSets.main.output.resourcesDir"
    into reactWebsite
    dependsOn(processResources)
    onlyIf { project.ext.runNpmBuild }
}
tasks.register("installWebsiteModules", NpmTask) {
    npmCommand = [ 'install' ]
    workingDir = reactWebsite
    ignoreExitValue = true
    environment = npmSettingsMap
    dependsOn(copyReactWorkspace)
    onlyIf { project.ext.runNpmBuild }
}
tasks.register("buildWebsite", NpmTask) {
    npmCommand = [ 'run-script', 'build' ]
    workingDir = reactWebsite
    ignoreExitValue = false
    environment = npmSettingsMap
    dependsOn(installWebsiteModules)
    onlyIf { project.ext.runNpmBuild }
}
tasks.register("copyWebsiteAssets", Copy) {
    from "$reactWebsite/public/assets"
    into "$reactWebsite/assets"
    dependsOn(buildWebsite)
    onlyIf { project.ext.runNpmBuild }
}

copyLegal {
    dependsOn(copyWebsiteAssets)
    from(rootDir) {
        include 'LICENSE.txt'
        include 'NOTICE.txt'
    }
    into new File("$reactWebsite/assets")
    duplicatesStrategy = 'exclude'
}

jar {

    from(reactWebsite) {
        include "assets/**"
    }

    eachFile { f ->
        String prefix = f.relativeSourcePath.pathString
        if (!(prefix.startsWith("assets") || prefix.startsWith("com") || prefix.startsWith("META-INF"))) {
            logger.debug("Excluding from the JAR file: $f\n")
            f.exclude()
        } else {
            logger.debug("Including into the JAR file: $f\n")
        }
    }

}