/*
 * Copyright 2018-2020 Cloudera, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
allprojects {
  repositories {

      mavenLocal()
      mavenCentral() {
        mavenContent {
            releasesOnly()
        }
      }
      maven { url gbnUrl }
      maven { url mavenUrl }
  }
}

subprojects {
    apply plugin: 'com.github.ben-manes.versions'
    apply from: "$rootDir/dependencies.gradle"

    version = project_version
    group = 'com.hortonworks.registries'

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'project-report'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'signing'

    configurations {
        compile {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
        }
        tests.extendsFrom testRuntime
    }

    // dependency constraints only
    dependencies {
        compile platform(libraries.dropwizard.bom)
        compile platform(libraries.dropwizard.dependencies)

        constraints {
            compile(libraries.logging.logback) {
                version {
                    strictly project.versions_logback
                }
            }
            compile(libraries.logging.slf4j_api) {
                version {
                    strictly project.versions_slf4j
                }
            }
            testCompile(libraries.logging.slf4j_simple) {
                version {
                    strictly project.versions_slf4j
                }
            }
            compile(libraries.snakeyaml) {
                version {
                    strictly project.versions_snakeyaml
                }
            }
            compile(libraries.swagger) {
                version {
                    strictly project.versions_swagger
                }
            }
            constraints {
                implementation("org.apache.commons:commons-compress:$versions_commons_compress")
                testCompile("org.apache.commons:commons-compress:$versions_commons_compress")
            }
            compile(libraries.avro) {
                version {
                    strictly project.versions_avro
                }
            }
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }
    test {
        useJUnitPlatform()
    }
    test.finalizedBy(jacocoTestReport)
    jacocoTestReport.dependsOn(test)

    checkstyle {
        toolVersion = '9.3'
        ignoreFailures = false
        configFile = rootProject.file('checkstyle/checkstyle.xml')
        configProperties = [
                'suppressionsFile': rootProject.file('checkstyle/suppressions.xml')
        ]
    }
    test.dependsOn('checkstyleMain', 'checkstyleTest')
    test.finalizedBy(check)

    // include license files into every jar
    task copyLegal(type: Copy) {
        from(rootDir) {
            include 'LICENSE.txt'
            include 'NOTICE.txt'
        }
        into new File(sourceSets.main.output.resourcesDir, "META-INF")
    }
    assemble.dependsOn(copyLegal)
    assemble.dependsOn(projectReport)

    tasks.withType(Javadoc) {
        failOnError false
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }

    task allDeps(type: DependencyReportTask) {}

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
        }
    }

    configurations.matching { it.name.contains("tests") }.each {testConfiguration ->
        try {
            components.java.withVariantsFromConfiguration(testConfiguration) {
                skip()
            }
        } catch(InvalidUserDataException e) {}
    }

    // jersey-shaded has custom publication and we don't publish any test artifacts
    if (it.name != 'jersey-shaded' && it.name != 'behavior-tests' && it.name != 'hortonworks-registries-bin' && it.name != 'hortonworks-registries-docker') {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId = group
                    from components.java

                    pom {
                      name = 'Schema Registry'
                      url = 'https://github.com/hortonworks/registry'

                      scm {
                        url = 'https://github.com/hortonworks/registry'
                        connection = 'scm:git:git@github.com:hortonworks/registry.git'
                        developerConnection = 'scm:git:git@github.com:hortonworks/registry.git'
                      }

                      licenses {
                        license {
                           name = "The Apache License, Version 2.0"
                           url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                      }

                      developers {
                        developer {
                            id = 'galyo'
                            name = 'Csaba Galyo'
                            email = 'galyo@cloudera.com'
                        }
                        developer {
                            id = 'csenge.maruzsi'
                            name = 'Csenge Virag Maruzsi'
                            email = 'csenge.maruzsi@cloudera.com'
                        }
                        developer {
                            id = 'acsaki'
                            name = 'Andras Csaki'
                            email = 'acsaki@cloudera.com'
                        }
                      }
                    }

                }
            }
        }
        
        signing {
            //useGpgCmd()  // enable if using command line gpg
            sign publishing.publications.mavenJava
        }
        
        artifacts {
            archives javadocJar, sourcesJar
        }
        
        uploadArchives {
          repositories {
            mavenDeployer {
              beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

              repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusUsername, password: nexusPassword)
              }

              snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: nexusUsername, password: nexusPassword)
              }

            }
          }
        }

    }
}

buildscript {
    repositories {
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:0.36.0"
        classpath "com.peterabeles.gversion:com.peterabeles.gversion.gradle.plugin:1.10"
        classpath "com.github.jengelman.gradle.plugins:shadow:5.2.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
        classpath 'org.owasp:dependency-check-gradle:7.1.1'
    }
}

apply plugin: "org.sonarqube"
apply plugin: 'org.owasp.dependencycheck'

dependencyCheck {
    formats = ['HTML', 'JSON']
    cve {
        urlModified = 'https://kafka-toolshed.infra.cloudera.com/nvd/nvdcve-1.1-modified.json.gz'
        urlBase = 'https://kafka-toolshed.infra.cloudera.com/nvd/nvdcve-1.1-%d.json.gz'
        waitTime = 4000
        startYear = 2002
    }
    analyzers {
        nuspecEnabled = false
        assemblyEnabled = false
        msbuildEnabled = false
        retirejs {
            enabled = false
        }
        ossIndex {
            enabled = false
        }
    }
}
