/*
 * Copyright 2018-2021 Cloudera, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

dependencies {

    testImplementation project(':integration-tests').sourceSets.test.output
    testImplementation(project(':schema-registry:schema-registry-client')) {
        transitive = false
    }
    testImplementation(project(':schema-registry:schema-registry-serdes')) {
        transitive = false
    }
    testImplementation project(':schema-registry:schema-registry-common')
    testImplementation project(':schema-registry:schema-registry-core')
    testImplementation project(':schema-registry:oauth2-authenticator')
    testImplementation project(':schema-registry:oauth2-common')
    testImplementation project(':schema-registry:ssl-authenticator')
    testImplementation project(':schema-registry:schema-registry-webservice')
    testImplementation project(':common-auth')
    testImplementation project(':registry-common')
    testImplementation project(':storage:storage-core')

    // we need this to use Atlas types, but we don't import any transitive dependencies
    testImplementation libraries.atlas.intg

    testImplementation libraries.commons.collections
    testImplementation libraries.flyway
    testImplementation libraries.freemarker
    // we need to use version 200 due to new features, but we also need to keep
    // the old version in storage-core because (h2) transactions don't work with newer versions
    testImplementation("com.h2database:h2") {
        version {
            strictly "1.4.200"
        }
    }
    testImplementation libraries.hikari

    testImplementation libraries.dropwizard.core
            
    testImplementation libraries.httpclient.client
    testImplementation libraries.httpclient.mime
    testImplementation libraries.validation_api2
    testImplementation libraries.nimbus
    testImplementation libraries.jose4j

    testImplementation libraries.junit
    testImplementation libraries.mockito
    testImplementation libraries.mockito_junit5
    testImplementation libraries.mockserver

    testImplementation libraries.cucumber.core
    testImplementation libraries.cucumber.junit
    testImplementation libraries.cucumber.junit_platform
    testImplementation libraries.cucumber.picocontainer
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--plugin', 'html:build/reports/cucumber/cucumber-pretty.html',
                    '--glue', 'com.cloudera.dim.schemaregistry', 'src/test/resources']
        }
    }
}

check.dependsOn(cucumber)

